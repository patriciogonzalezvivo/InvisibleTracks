# Author @patriciogv - 2015

import:
    - https://tangrams.github.io/blocks/global.yaml
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/functions/map.yaml
    - https://tangrams.github.io/blocks/geometry/matrices.yaml
    - https://tangrams.github.io/blocks/shapes/rect.yaml
    - https://tangrams.github.io/blocks/shapes/cross.yaml
    - https://tangrams.github.io/blocks/filter/grid.yaml

sources:
    osm:
        type: TopoJSON
        url:  https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-Nhm6Mkg

textures:
    orbit:
        element: 

global: 
    active_types: ""
    active_names: ""
    hovered: -1

scene:
    background: 
        color: '#020303'

cameras:
    perspective:
        type: perspective

layers:
    orbit:
        data: { source: orbits }
        filter: |
                function () {
                    if (global.active_names !== "") {
                        var names = global.active_names.split(",");
                        for (var name of names) {
                            if (name !== "" && feature['name'].indexOf(name) > -1) {
                                return true;
                            }
                        }
                    } else {
                        var types = global.active_types.split(",");
                        for (var type of types) {
                            if (type !== "" && feature['type'].indexOf(type) > -1) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
        draw:
            orbit:
                interactive: true
                order: 10
                color: |
                    function(){
                        var hovered = feature.id === global.hovered ? 0 : 1;
                        return [ ( Math.floor(feature.id/255))/255, (feature.id%255)/255, hovered ]; 
                    }
                width: [ [1,3px], [20,180px]]
                extrude: function () { return feature.height * 1000; }
    earth:
        data: { source: osm }
        draw:
            hud:
                order: global.order
                color: '#192B31'
    water:
        data: { source: osm }
        draw:
            hud:
                # interactive: true
                order: global.order
                color: '#020303'
    landuse:
        data: { source: osm }
        draw:
            area:
                order: global.order
                color: '#427071'
    roads:
        data: { source: osm }
        filter: { $zoom: {min: 7}, not: { kind: rail } }
        draw:
            lines:
                order: 7
                color: [.7,.7,.7]
                width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    order: global.order
                    color: [.8,.8,.8]#[1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [.7,.7,.7]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [.5,.5,.5]#[0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        order: 5
                        color: [.5,.5,.5]#[0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    color: [[13, [.6,.6,.6]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { kind_detail: primary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { kind_detail: secondary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { kind_detail: tertiary }
                        draw:
                            lines:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                lines:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]

styles:
    hud:
        base: polygons
        mix: [shapes-cross, filter-grid]
        shaders:
            blocks:
                filter: |
                    // VARIABLES
                    //===============================
                    color = clamp(color,0.0,1.0);
                    vec2 st_center = gl_FragCoord.xy/u_resolution.xy;
                    float aspect = u_resolution.x/u_resolution.y;
                    st_center -= .5;
                    st_center.x *= aspect;
                    st_center += .5;
                    //
                    // GRID ON TILES
                    //===============================
                    // GRID
                    vec2 st = getTileCoords();
                    float zoom = 0.0001+fract(u_map_position.z);
                    float overlayGrid = 0.0;
                    //overlayGrid += TileGrid()*.5;
                    //
                    // CROSSES
                    vec2 crosses_st = st + .5;
                    vec2 crosses_st_f = fract(crosses_st);
                    overlayGrid *= 1.-rect(crosses_st_f, .003*(1.+(1.-zoom)));
                    
                    //
                    // APPLY
                    //===============================
                    color.rgb = mix(color.rgb,vec3(0.824,0.835,0.843),clamp(overlayGrid,0.,1.));
                    overlayGrid = cross(crosses_st_f, .0001, .012*(1.+(1.-zoom)) )*.75;
                    color.rgb = mix(color.rgb,vec3(0.700,0.761,0.768),clamp(overlayGrid,0.,1.));
    area:
        base: polygons
        mix: [geometry-matrices, functions-map, functions-aastep, hud]
        blend: inlay
        shaders: 
            blocks: 
                global: |
                    float stripes(vec2 st, float width){
                        st = rotate2D(.72)*st;
                        st *= 92.;
                        return aastep(.5+width*0.5,abs(sin(st.y*3.14159265358)));
                    }
                filter: |
                    float SatOsmPct = pow(1.-map(u_map_position.z,6.,9.,0.,1.),5.0);
                    color.a = stripes(st_center*2.,SatOsmPct*1.4)*.5;
    orbit:
        base: lines
        mix: [geometry-matrices, functions-map, shapes-cross]
        lighting: false
        texcoords: true
        animated: true
        blend: overlay
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163
                TWO_PI: 6.283185307
                EARTH_RADIUS: 6378137.0
            uniforms:
                u_data: orbit
                u_param: [0,0,0,0]
            blocks:
                global: |
                    float pulse(float x, float p, float w){
                        return (smoothstep(p-w*.5,p,x) + smoothstep(p+w*.5,p,x))-1.0;
                    }

                    float getIndex (vec2 encodedIndex) {
                        return (encodedIndex.x*65025.+encodedIndex.y*255.)+.5;
                    }

                    float decode (vec3 value) {
                        return ((value.x*255.)+(value.y*65025.)+(value.z*16581375.))/16581375.;
                    }

                    vec2 getCoords (vec2 st) {
                        float texWidth = (u_param.x*2.);
                        float texHeigth = u_param.y;
                        st.y = 1.-st.y/texHeigth;
                        vec3 lon = texture2D(u_data,vec2(st.x/texWidth,st.y)).xyz;
                        vec3 lat = texture2D(u_data,vec2(st.x/texWidth+.5,st.y)).xyz;
                        return vec2(decode(lon), decode(lat));
                    }

                    // Return normalized values for lat, lon and height, and angle in radiants
                    vec2 getPosFor (float index, float time) {
                        float col = (time+u_param.w)/u_param.z;
                        return vec2(getCoords(vec2(col,index)));
                    }
                filter: |
                    // Locate the satellite
                    //===============================
                    float index = getIndex(color.st);
                    vec2 pos = getPosFor(index,u_time);
                    pos = (((pos*2.)-1.)*PI)*EARTH_RADIUS;
                    vec2 worldPos = u_map_position.xy+v_position.xy;
                    vec2 st = (worldPos-pos)*.0000002;
                    st *= 1.5+pow(map(u_map_position.z,0.,15.,0.,1.),5.0)*500.;

                    // Line
                    vec3 line = vec3(0.738,0.710,0.438);
                    float line_width = .05;
                    float line_alpha = .5;
                    vec3 satellite = vec3(8.,8.,.4);
                    vec3 bbox = vec3(0.824,0.835,0.843);

                    if (v_color.b < .5) {
                        //line = vec3(1.,1.,.3);
                        line = vec3(0.631,0.235,0.157);
                        //satellite = vec3(1.,1.,.0);
                        satellite = vec3(0.898,0.235,0.145);
                        bbox = vec3(1.);
                        line_width = .08;
                        line_alpha = .9;
                    }
                    color = vec4(line,pulse(v_texcoord.x,.5,line_width)*line_alpha);

                    // Bounding Box
                    float spot = 0.;
                    st += .5;
                    spot = max(rect(st,0.02)-rect(st,0.015)-cross(st,.04,.05),0.);
                    color.rgb = mix(color.rgb, bbox, spot);
                    color.a += spot*.9;

                    // Satellite
                    st -= .5;
                    st *= 1.+v_color.b;
                    spot = rect(st+.5,0.002);
                    //spot = cross(st+.5,0.01,0.0025);
                    color.rgb = mix(color.rgb, satellite, spot);
                    color.a += spot;